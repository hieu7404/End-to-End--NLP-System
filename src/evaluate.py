import json
import re

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn c√°c file
REFERENCE_DATA_PATH = "./data/questions.json"
PREDICTION_PATH = "./system_output/system_output.txt"

def clean_text(text):
    text = text.strip().lower()
    return text

def evaluate_model():
    # ƒê·ªçc d·ªØ li·ªáu tham chi·∫øu t·ª´ questions.json
    try:
        with open(REFERENCE_DATA_PATH, "r", encoding="utf-8") as ref_file:
            reference_data = json.load(ref_file)
        reference_answers = [item["reference_answer"] for item in reference_data]
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file {REFERENCE_DATA_PATH}")
        return
    except json.JSONDecodeError:
        print(f"‚ùå L·ªói: File {REFERENCE_DATA_PATH} kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON")
        return
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc {REFERENCE_DATA_PATH}: {e}")
        return

    # ƒê·ªçc file system_output.txt
    try:
        with open(PREDICTION_PATH, "r", encoding="utf-8") as pred_file:
            predicted_answers = [line.strip() for line in pred_file if line.strip()]
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file {PREDICTION_PATH}")
        return
    except UnicodeDecodeError:
        print(f"‚ùå L·ªói: File {PREDICTION_PATH} c√≥ v·∫•n ƒë·ªÅ v·ªÅ m√£ h√≥a")
        return
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc {PREDICTION_PATH}: {e}")
        return

    # Ki·ªÉm tra s·ªë l∆∞·ª£ng c√¢u tr·∫£ l·ªùi
    print(f"\nS·ªë c√¢u tr·∫£ l·ªùi tham chi·∫øu: {len(reference_answers)}")
    print(f"S·ªë c√¢u tr·∫£ l·ªùi d·ª± ƒëo√°n: {len(predicted_answers)}")
    if len(reference_answers) != len(predicted_answers):
        print(f"\n‚ö†Ô∏è S·ªë l∆∞·ª£ng c√¢u tr·∫£ l·ªùi kh√¥ng kh·ªõp: Tham chi·∫øu = {len(reference_answers)}, D·ª± ƒëo√°n = {len(predicted_answers)}")
        return

    # So s√°nh t·ª´ng c·∫∑p c√¢u tr·∫£ l·ªùi v√† hi·ªÉn th·ªã b·∫£ng
    print("\n--- So s√°nh t·ª´ng c√¢u tr·∫£ l·ªùi ---")
    print(f"{'STT':<5} {'Tham chi·∫øu':<50} {'D·ª± ƒëo√°n':<50} {'K·∫øt qu·∫£'}")
    print("-" * 120)

    correct = 0
    total = len(reference_answers)
    for idx, (ref, pred) in enumerate(zip(reference_answers, predicted_answers)):
        ref_clean = clean_text(ref)
        pred_clean = clean_text(pred)
        # Logic kh·ªõp l·ªánh ƒë∆∞·ª£c s·ª≠a ƒë·ªïi ƒë·ªÉ x·ª≠ l√Ω c√°c kh·ªõp l·ªánh m·ªôt ph·∫ßn nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh
        match = ref_clean == pred_clean or ref_clean in pred_clean or pred_clean in ref_clean
        result = "‚úÖ ƒê√∫ng" if match else "‚ùå Sai"
        if match:
            correct += 1
        # C·∫Øt b·ªõt vƒÉn b·∫£n hi·ªÉn th·ªã n·∫øu qu√° d√†i
        ref_display = ref if len(ref) <= 47 else ref[:44] + "..."
        pred_display = pred if len(pred) <= 47 else pred[:44] + "..."
        print(f"{idx + 1:<5} {ref_display:<50} {pred_display:<50} {result}")
        if not match:
            print(f"    Kh√¥ng kh·ªõp: Tham chi·∫øu = '{ref}', D·ª± ƒëo√°n = '{pred}'")

    # T√≠nh v√† in ƒë·ªô ch√≠nh x√°c
    accuracy = (correct / total) * 100
    print(f"\nüéØ ƒê·ªô ch√≠nh x√°c: {accuracy:.2f}% ({correct}/{total})")

if __name__ == "__main__":
    evaluate_model()